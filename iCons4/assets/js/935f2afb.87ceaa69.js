"use strict";(self.webpackChunki_cons_4=self.webpackChunki_cons_4||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/iCons/iCons4/docs/intro","docId":"intro"},{"type":"category","label":"Definitions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"RUST","href":"/iCons/iCons4/docs/definitions/rust","docId":"definitions/rust"},{"type":"link","label":"C++","href":"/iCons/iCons4/docs/definitions/cpp","docId":"definitions/cpp"},{"type":"link","label":"x86 Architecture","href":"/iCons/iCons4/docs/definitions/x86","docId":"definitions/x86"},{"type":"link","label":"x86 Assembly Language","href":"/iCons/iCons4/docs/definitions/x86asm","docId":"definitions/x86asm"},{"type":"link","label":"LLVM (Low-Level Virtual Machine)","href":"/iCons/iCons4/docs/definitions/llvm","docId":"definitions/llvm"}],"href":"/iCons/iCons4/docs/category/definitions"},{"type":"category","label":"Thesis Milestones","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Semester 0: CICS Syslab","href":"/iCons/iCons4/docs/thesis/syslab","docId":"thesis/syslab"},{"type":"link","label":"Semester 1: Thesis Presentation","href":"/iCons/iCons4/docs/thesis/sem1","docId":"thesis/sem1"},{"type":"link","label":"Semester 2: Part 2 Initial","href":"/iCons/iCons4/docs/thesis/pt2init","docId":"thesis/pt2init"}],"href":"/iCons/iCons4/docs/category/thesis-milestones"}]},"docs":{"definitions/cpp":{"id":"definitions/cpp","title":"C++","description":"C++ is a versatile, statically-typed programming language that combines high-level abstractions with low-level system access. It was developed as an extension of the C programming language, adding object-oriented features and other modern concepts. C++ is widely used in a variety of applications, from systems programming to game development and high-performance software.","sidebar":"tutorialSidebar"},"definitions/llvm":{"id":"definitions/llvm","title":"LLVM (Low-Level Virtual Machine)","description":"LLVM, short for Low-Level Virtual Machine, is a versatile and powerful open-source compiler infrastructure. It\'s designed to optimize and compile high-level programming languages like Rust and C++ into efficient machine code that can run on various hardware platforms. LLVM is instrumental in modern software development, enabling performance optimization and portability.","sidebar":"tutorialSidebar"},"definitions/rust":{"id":"definitions/rust","title":"RUST","description":"Rust is a statically-typed systems programming language known for its emphasis on memory safety, zero-cost abstractions, and high performance. It was first developed by Mozilla and released in 2010. Rust\'s design goals include providing a safe and concurrent alternative to C and C++, while maintaining low-level control over hardware and system resources.","sidebar":"tutorialSidebar"},"definitions/x86":{"id":"definitions/x86","title":"x86 Architecture","description":"x86 is a widely used computer architecture that encompasses a family of instruction set architectures based on the Intel 8086 CPU. It has evolved over the years and includes several generations, such as the 80286, 80386, 80486, and the more recent x86-64 (also known as AMD64) architecture. x86 is the foundation of the majority of personal computers and servers, running operating systems like Windows and Linux.","sidebar":"tutorialSidebar"},"definitions/x86asm":{"id":"definitions/x86asm","title":"x86 Assembly Language","description":"x86 Assembly Language is a low-level programming language that directly corresponds to the architecture of x86-based processors. It provides a human-readable representation of machine code instructions, enabling programmers to write code that directly controls the CPU and memory. Understanding x86 Assembly is crucial for tasks like system programming, reverse engineering, and optimizing critical software components.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This project mainly compares and contrasts between the RUST Programming Language, and the C++ Programming Language. We focus on the Cargo and Clang Compilers respectively, since they are both based on the LLVM Architecture. Thus, the low-level assembly generated by the LLVM compiler remains uniform between the two languages, and comparisons can be made.","sidebar":"tutorialSidebar"},"thesis/pt2init":{"id":"thesis/pt2init","title":"Semester 2: Part 2 Initial","description":"The following is the first presentation during the start of Spring 2024.","sidebar":"tutorialSidebar"},"thesis/sem1":{"id":"thesis/sem1","title":"Semester 1: Thesis Presentation","description":"The following is the state of everything at the end of Fall 2023.","sidebar":"tutorialSidebar"},"thesis/syslab":{"id":"thesis/syslab","title":"Semester 0: CICS Syslab","description":"The following is the first presentation during the very beginning, Spring 2023. These slides were shown in the first CICS Systems Lab Meeting, whe the project was in the very initial stages.","sidebar":"tutorialSidebar"}}}')}}]);